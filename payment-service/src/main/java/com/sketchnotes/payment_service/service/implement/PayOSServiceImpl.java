package com.sketchnotes.payment_service.service.implement;

import com.sketchnotes.payment_service.entity.Transaction;
import com.sketchnotes.payment_service.entity.Wallet;
import com.sketchnotes.payment_service.entity.enumeration.PaymentStatus;
import com.sketchnotes.payment_service.entity.enumeration.TransactionType;
import com.sketchnotes.payment_service.repository.TransactionRepository;
import com.sketchnotes.payment_service.repository.WalletRepository;
import com.sketchnotes.payment_service.service.PaymentGatewayService;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import vn.payos.PayOS;
import vn.payos.type.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collections;

@Slf4j
@Service("payosService")
@RequiredArgsConstructor
public class PayOSServiceImpl implements PaymentGatewayService {

    private final PayOS payOS;
    private final WalletRepository walletRepository;
    private final TransactionRepository transactionRepository;

    @Override
    public String createPaymentLink(Long walletId, BigDecimal amount, String description) {
        Wallet wallet = walletRepository.findById(walletId)
                .orElseThrow(() -> new RuntimeException("Wallet not found"));

        try {
            long orderCode = System.currentTimeMillis(); // unique order id

            // t·∫°o request payment
            PaymentData paymentData = PaymentData.builder()
                    .orderCode(orderCode)
                    .amount(amount.intValue()) // PayOS d√πng int (VND)
                    .description(description)
                    .returnUrl("http://localhost:3000/payment/success") // FE s·∫Ω handle
                    .cancelUrl("http://localhost:3000/payment/cancel")
                    .items(Collections.singletonList(
                            ItemData.builder()
                                    .name("Deposit to wallet " + walletId)
                                    .quantity(1)
                                    .price(amount.intValue())
                                    .build()
                    ))
                    .build();

            CheckoutResponseData response = payOS.createPaymentLink(paymentData);

            // l∆∞u transaction ·ªü tr·∫°ng th√°i PENDING
            Transaction tx = Transaction.builder()
                    .wallet(wallet)
                    .amount(amount)
                    .status(PaymentStatus.PENDING)
                    .type(TransactionType.DEPOSIT)
                    .orderCode(orderCode) // l∆∞u ƒë·ªÉ mapping v·ªõi callback
                    .createdAt(LocalDateTime.now())
                    .build();
            transactionRepository.save(tx);

            return response.getCheckoutUrl();

        } catch (Exception e) {
            throw new RuntimeException("Error creating PayOS payment: " + e.getMessage(), e);
        }
    }

    @Transactional
    public void handleCallback(Webhook webhook) {
        try {
            // 1Ô∏è‚É£ Verify callback v·ªõi SDK PayOS
            WebhookData data = payOS.verifyPaymentWebhookData(webhook);

            Long orderCode = data.getOrderCode();
            int amount = data.getAmount();
            String code = data.getCode(); // "00" = success, "01" = fail

            log.info("üì© Received PayOS webhook: orderCode={}, amount={}, code={}", orderCode, amount, code);

            // 2Ô∏è‚É£ T√¨m transaction t∆∞∆°ng ·ª©ng
            Transaction tx = transactionRepository.findByOrderCode(orderCode).orElse(null);
            if (tx == null) {
                log.warn("‚ö†Ô∏è Transaction not found for orderCode {}", orderCode);
                return; // KH√îNG throw ƒë·ªÉ PayOS nh·∫≠n 200 OK
            }

            // 3Ô∏è‚É£ Idempotent: n·∫øu ƒë√£ x·ª≠ l√Ω th√¨ b·ªè qua
            if (tx.getStatus() == PaymentStatus.SUCCESS || tx.getStatus() == PaymentStatus.FAILED) {
                log.info("‚ÑπÔ∏è Transaction {} already processed with status {}", orderCode, tx.getStatus());
                return;
            }

            // 4Ô∏è‚É£ C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
            if ("00".equals(code)) {
                tx.setStatus(PaymentStatus.SUCCESS);
                Wallet wallet = tx.getWallet();
                if (wallet != null) {
                    wallet.setBalance(wallet.getBalance().add(tx.getAmount()));
                    walletRepository.save(wallet);
                }
                log.info("‚úÖ Payment SUCCESS for orderCode={}, amount={}", orderCode, tx.getAmount());
            } else {
                tx.setStatus(PaymentStatus.FAILED);
                log.info("‚ùå Payment FAILED for orderCode={}", orderCode);
            }

//            tx.(LocalDateTime.now());
            transactionRepository.save(tx);

            // 5Ô∏è‚É£ (Tu·ª≥ ch·ªçn) g·ª≠i s·ª± ki·ªán sang Order-Service n·∫øu b·∫°n d√πng SAGA
            // orderEventProducer.publishPaymentEvent(tx);

        } catch (Exception e) {
            // ‚ùó Kh√¥ng throw ƒë·ªÉ tr√°nh tr·∫£ l·ªói 500 cho PayOS
            log.error("üö® Error verifying PayOS callback: {}", e.getMessage(), e);
        }
    }


}
